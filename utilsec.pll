#!/usr/local/bin/perl -wT
$ini{'^load'}.=$;.__FILE__.' '.<<'END'
#############################################################################

 utilsec.pll 0.2 19960322-19971007 joel@school.net 

 DO NOT EDIT THIS!

 This is a copy of the master version, and will be overwritten.
 The master version is on jade.school.net in /www/cgi/util/joel/

 Copyright (c) 1994-1997 Joel Parker Henderson joel@school.net 800-558-2197
 This source code is private. Do not distribute without written permission.

 utilsec.pll is a perl library, and does not do anything on its own.
 It has security utilties: password creation, encryption, validation, etc.

#############################################################################
END
;

use Crypt::DES;       

 @kCharLetAll           # Letters            (A-Z,a-z)
=@kCharLetUpc           # Letters, Uppercase (A-Z)
=@kCharLetLwc           # Letters, Lowercase (a-z)
=@kCharLettel_24        # Letters on the telephone (no q or z)
=@kCharLettel_16        # Letters on the telephone, only first two of each.
=@kCharNum              # Digits             (0-9)
=@kCharNumLettel        # Digits with telephone letter equivalents (2-9)
=@kCharOdd              # Weird characters that are good for passwords
=@kNumToLettel          # Converts a number to a telephone letter
=();

@kCharLetAll    =('A'..'Z','a'..'z');
@kCharLetUpc    =('A'..'Z');
@kCharLetLwc    =('a'..'z');
@kCharLettel_16 =split(//,'abdeghjkmnprtuwx');
@kCharLettel_24 =split(//,'abcdefghijklmnoprstuvwxy');
@kCharNum       =('0'..'9');
@kCharNumLettel =('2'..'9');
@kCharOdd       =split(//,'!@#$%&()-=+:;<>?/');

@kNumToLettel=('000','111','abc','def','ghi','jkl','mno','prs','tuv','wxy');

srand;

##
#  &RandomInt $n, [$count]
#
#  Generates random integers from 0 and N, inclusive.
#  If count is not used, you get one integer, returned as a scalar.
#  If count is used, you get $count integers, returned as an array.
##

sub RandomInt {
  local ($maxInt,$count)=@_;
  local ($i,$r);

  # Perl's "rand n" gives a number between 0 and n. Inclusive? Exclusive?
  # To get around this, we generate 0 to n+2, then subtract 1: -1 to n+1.
  # Then trunctate with the "int" function, then throw out numbers that
  # are out of range.

  for $i (1..((defined $count)?$count:1)) {
    $r=-1;
    while (($r < 0) or ($r > $maxInt)) {$r=-1+int(rand (2+$maxInt));}
    push(@r,$r);
  }
  return (defined $count) ? @r : $r;
}

##
# &MakeUserID 
#
# Makes user ids. This example shows two entries, three groups per entry,
# a dash sparator between the groups, four characters per group, and the
# characters are digits:
#
#   &MakeUserID(2,3,'-',4,@kCharNum)  ==>
#
#      1234-5678-9012
#      9876-5432-1098
#
# Example of a good Unix password, mixed case, with weird characters:
# n.b. In real life, you should actually use &MakeUnixPassword, because
# it guarantees two odd characters in every password.
#
#   &MakeUserId(1,1,'',8,(@kCharLetAll,@kCharNum,@kCharOdd));
##

sub MakeUserID {
  local ($entries,$groupsPerEntry,$groupSeparator,$charsPerGroup,@char)=@_;
  if (!defined $entries)             { $entries            =1;   }
  if (!defined $groupsPerEntry)      { $groupsPerEntry     =3;   }
  if (!defined $groupSeparator)      { $groupSeparator     ='-'; }
  if (!defined $charsPerGroup)       { $charsPerGroup      =4;   }
  if (!defined @char)                { @char=@kCharNum;          }
  local ($e,$g,$c,$r,$group,@group,@entry);

  for $e (1..$entries) {
    @group=();
    for $g (1..$groupsPerEntry) {
      $group='';
      for $c (1..$charsPerGroup) {
        $char=$char[$r=&RandomInt($#char)];
        $group.=$char;
      }
      push(@group,$group);
    }
    push(@entry,join($groupSeparator,@group));
  }
  @entry;
}

# Takes an array, sort it and makes it unique.
# Your input array is *not* changed.

sub ArrSortUnique { 
  local (@a)=sort(@_);
  local ($i)=0;
  while ($i<=$#a) {
    if ($a[$i] eq $a[$i-1]) { splice(@a,$i,1); } else { $i++; }
  }
  @a;
}

sub ArrDesort {
  local (@a)=@_;
  local ($r,@b); @b=();
  while (@a) {
    push (@b,$a[$r= int rand $#a]);
    splice (@a,$r,1); 
  }
  @b;
}

sub MakeHttpPassword {
 my $pw=''; for (0..7) { $pw.=substr('abdeghjkmnprtuwx23456789',rand 23,1); }
 return $pw;
}

sub MakeUnixPassword {
  local (@pw,$pw);
  for $i (1..4) { push (@pw,$kCharLettel_16[rand $#kCharLettel_16]); }
  for $i (1..3) { push (@pw,$kCharNumLettel[rand $#kCharNumLettel]); }
  for $i (1..3) { push (@pw,$kCharOdd[rand $#kCharOdd]); }
  $pw=$kCharLettel_16[rand $#kCharLettel_16]; # must start with a letter
  while (8 > length $pw) {
   $pw.=splice(@pw,rand ($#pw+1),1);
  }
  return $pw;
}

sub NumToLettel {
  local (@a)=@_; local ($a,$pos,$c);
  foreach $a (@a) { for $pos (0..length($a)-1) {
    $c=substr($a,$pos,1);
    if (($c ge '2') and ($c le '9')) { substr($a,$pos,1)=substr($kNumToLettel[$c],RandomInt(2),1); }
  }}
  return @a;
}

sub LettelToNum {
  local (@a)=@_; local ($a,$pos,$c);
  foreach $a (@a) { for $pos (0..length($a)-1) {
    $c=substr($a,$pos,1);
    if (($c ge 'a') and ($c le 'z')){substr($a,$pos,1)=substr('2223334445556667q77888999z',(ord $c)-97,1);}
    if (($c ge 'A') and ($c le 'Z')){substr($a,$pos,1)=substr('2223334445556667q77888999z',(ord $c)-65,1);}
  }}
  return @a;
}

##
# &UserGenerateDES
#
# We do *not* use a straightforward ascii DES key, such as using
# the password as the key. NEVER do it that way, because if the
# cracker knows that the password was ascii, he has a huge start.
#
# Instead, we build the key as follows:
#
#   1. All password info must be lettels. (4 bits per character).
#      You will need 14 lettels to build a complete 56-bit DES key.
#
#   2. We translate the lettels into 4-bit sequences. 
#
#   3. If the password was randomly generated, then we get a random key
#      that is not susceptible to ASCII-frequency cracking.
##

sub UserGenerateDES {
  local (@idpw)=@_;
  local (@kLetterToBits4,$i,$idpw);
  @kLetterToBits4=(
     '0000','0001','c','0010','0011','f'
    ,'0100','0101','i','0110','0111','l'
    ,'1000','1001','o','1010','q','1011','s'
    ,'1100','1101','v','1110','1111','y','z');

  foreach $idpw (@idpw) {
    $idpw=~s/[^abdeghjkmnprtuwx]//g;
print STDERR "idpw = $idpw \n";
    $bits=''; 
    for $i (0..13) {$bits.=@kLetterToBits4[(ord substr($idpw,$i,1))-97]; }
print "bits = $bits \n";
    push(@bits,$bits);
  }
  return @bits;
}  

sub Demo {
  $n=2;
  @id =&ArrDesort(&ArrSortUnique(&MakeUserID($n,3,'-',4,@kCharNumLettel)));
  @pw1=&ArrDesort(&ArrSortUnique(&MakeUserID($n,1,'' ,7,@kCharLettel_16)));
  @pw2=&ArrDesort(&ArrSortUnique(&MakeUserID($n,1,'' ,7,@kCharLettel_16)));
  $n = ($#id < $#pw) ? $#id : $#pw;  ## min(id,pw)
  for $i (0..$n) { print "$id[$i] $pw[$i] ".&UserGenerateDES($pw[$i])."\n"; }
}

#--------------------------- nice interface --------------------------------

# If you are going to require UtilSecure, and use it to generate new user
# accounts, then you should maintain a file of all indicodes that you've
# already use. Your script should define $kIndicodeFile; when UtilSecure
# creates a new indicode, it will be checked to make sure it doesn't exist.

sub IndicodeIsUnique {
  local ($indicodeFile,$idToTest)=@_;
  if ($indicodeFile eq '') { return -1; }
#  open(ID,$indicodeFile);
#  while (($id=<ID>) and ($id ne $idToTest)) {}
#  close(ID);
  return ($id ne $idToTest);
}

sub IndicodeNew {
  local ($indicodeFile)=@_;
  local (@id,$pw1,$pw2,$uniqueFlag);
  $uniqueFlag=0; @id=('hello');
print STDERR "Starting [$uniqueFlag] Testing indicodeFile [$indicodeFile] and indicode [$id[0]]\n";
  while (!$uniqueFlag) {
    @id='1111-'.&MakeUserID(1,3,'-',4,@kCharNumLettel);
print STDERR "Unique [$uniqueFlag] Testing indicodeFile [$indicodeFile] and indicode [$id[0]]\n";
    $uniqueFlag=&IndicodeIsUnique($indicodeFile,$id[0]);
  }
  $pw1='s'.&MakeUserID($n,1,'',7,@kCharLettel);
  $pw2='c'.&MakeUserID($n,1,'',7,@kCharLettel);  
  return ($id,$pw1,$pw2);
}

sub IndicodeNewReportHTML {
  local ($idterm,$id,$pw1,$pw2)=@_;
  return "
<p><hr><p><ul>
<b>Your <b>$idterm</b> number is your unique identifier in our database.
If someone knows your $idterm number, then he or she will be able to view information about you.
You can give your $idterm number to potential employers, so they can view your Fast*Form or Digital Resume.

<ul><ul><p>><b>Your $idterm is $id</b></ul></ul>

Your two <b>secret</b> passwords should never be shared with anyone, ever. 
To change any of your Fast*Form or Digital Resume information, you will
need both the secret passwords. Keep these secret passwords somewhere very
safe! 

<ul><ul><p><b>Your secret #1 is $pw1</b>
<p><b>Your secret #2 is $pw2</b></ul></ul>
<p><hr><p>";
}

###
#
# StrKeyDes ($inputText,$key,$encryptFlag) ==> $outputText
#
# DES works on 8 byte strings. The function below
# pads the input string to be a multiple of 8 bytes,
# then processes the entire string in 8 byte pieces.
# If $encryptFlag then encrypt, otherwise decrypt.
#
###

sub StrKeyDes {
 my $inp=shift; if (length($inp)%8) {$inp.=(' 'x (8-length($inp)%8));}
 my $des = new DES pack("H*", shift);
 my $func = (shift) ? \&DES::encrypt : \&DES::decrypt;
 my $out=''; my $pos=0;
 while ($pos<length($inp)){$out.=&$func($des,substr($inp,$pos,8)); $pos+=8;}
 return $out;
}



1
